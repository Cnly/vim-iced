*vim-iced.txt*            Clojunre interactive development environment for Vim8

Version: 0.1.1
Author : uochan <liquidz.uo+vim@gmail.com>
License: MIT LICENSE

==============================================================================
CONTENTS                                                    *vim-iced-contents*

Introduction         |vim-iced-introduction|
Install              |vim-iced-install|
  Leiningen          |vim-iced-leiningen|
  Boot               |vim-iced-boot|
nREPL Connection     |vim-iced-nrepl-connection|
ClojureScript        |vim-iced-clojurescript|
Evaluating           |vim-iced-evaluating|
  Stdout Buffer      |vim-iced-stdout-buffer|
Testing              |vim-iced-testing|
Skeleton             |vim-iced-skeleton|
Tag Jump             |vim-iced-tag-jump|
Editing S-exp        |vim-iced-editing-s-exp|
  Formatting         |vim-iced-formatting|
  Refactoring        |vim-iced-refactoring|
Interface            |vim-iced-interface|
  Commands           |vim-iced-commands|
  Functions          |vim-iced-functions|
  Key Mappings       |vim-iced-key-mappings|
Customizing          |vim-iced-customizing|
Changelog            |vim-iced-changelog|

==============================================================================
Introduction                                            *vim-iced-introduction*

  Clojure interactive development environment for Vim8.

  Requirement:
  - Vim 8.1 or later

  Lateste Version:
  - https://github.com/liquidz/vim-iced

==============================================================================
Install                                                      *vim-iced-install*

  Vim plugin dependencies:

  - vim-sexp
    https://github.com/guns/vim-sexp
  - ctrlp.vim
    https://github.com/ctrlpvim/ctrlp.vim
    Required when selecting multiple candidates

  Clojure library dependencies:
  - Leiningen user: |vim-iced-leiningen|
  - Boot user: |vim-iced-boot|

------------------------------------------------------------------------------
Leiningen                                                  *vim-iced-leiningen*

  $HOME/.lein/profile.clj
>
  {:user {:dependencies [[nrepl "0.4.4"]
                         [cider/cider-nrepl "0.18.0"]
                         [cider/orchard "0.3.0"]
                         [cljfmt "0.6.0"]]
          :plugins [[refactor-nrepl "2.4.0-SNAPSHOT"]]
          :repl-options {:nrepl-middleware
                           [cider.nrepl/wrap-complete
                           cider.nrepl/wrap-format
                            cider.nrepl/wrap-info
                            cider.nrepl/wrap-macroexpand
                            cider.nrepl/wrap-ns
                            cider.nrepl/wrap-out
                            cider.nrepl/wrap-pprint
                            cider.nrepl/wrap-pprint-fn
                            cider.nrepl/wrap-spec
                            cider.nrepl/wrap-test
                            cider.nrepl/wrap-undef]}}}
<
------------------------------------------------------------------------------
Boot                                                            *vim-iced-boot*

  $HOME/.boot/profile.boot
>
  (require (quote boot.repl))

  (swap! boot.repl/*default-dependencies* concat
    '[[nrepl "0.4.4"]
      [refactor-nrepl "2.4.0-SNAPSHOT"]
      [cider/cider-nrepl "0.18.0"]
      [cider/orchard "0.3.0"]
      [cljfmt "0.6.0"]])

  (swap! boot.repl/*default-middleware* concat
    '[cider.nrepl/wrap-complete
      cider.nrepl/wrap-format
      cider.nrepl/wrap-info
      cider.nrepl/wrap-macroexpand
      cider.nrepl/wrap-ns
      cider.nrepl/wrap-out
      cider.nrepl/wrap-pprint
      cider.nrepl/wrap-pprint-fn
      cider.nrepl/wrap-spec
      cider.nrepl/wrap-test
      cider.nrepl/wrap-undef
      refactor-nrepl.middleware/wrap-refactor])
<
==============================================================================
nREPL Connection                                    *vim-iced-nrepl-connection*

  REPL needs to be activated beforehand.
  - `lein repl`
  - `boot repl`
  - `clojure -Sdeps '{:deps {iced-repl {:git/url "https://github.com/liquidz/vim-iced" :sha "3dadf3c32473cdf9419dbbe10764b6d5c4fbcecc"}}}' -m iced-repl`

  |:IcedConnect| to connect nREPL.
  If not connected at the time of evaluation,
  vim-iced will connect automatically using '.nrepl-port' file.

  |:IcedDisconnect| to disconnect nREPL.

==============================================================================
ClojureScript                                          *vim-iced-clojurescript*

  Supports following environment currently.
  - figwheel
  - nashorn
  - custom

  With {custom} environment, you can define start/stop code.
  - |g:iced#nrepl#cljs#custom#start_code|
  - |g:iced#nrepl#cljs#custom#stop_code|

  |IcedStartCljsRepl| to start cljs-repl.
  |IcedQuitCljsRepl| to quit it.

==============================================================================
Evaluating                                                *vim-iced-evaluating*

  |:IcedEval| is the simplest way to evaluate forms.
  But working with {vim-sexp} is the best.

  See details: |<Plug>(iced_eval)|

------------------------------------------------------------------------------
Stdout Buffer                                          *vim-iced-stdout-buffer*

  Standard outputs will be outputted to dedicated buffer.
  |:IcedStdoutBufferOpen| to open it.
  |:IcedStdoutBufferClear| to clear all outputted lines.

==============================================================================
Testing                                                      *vim-iced-testing*

  vim-iced provides following test commands.
  - |:IcedTestUnderCursor|
  - |:IcedTestNs|
  - |:IcedTestAll|
  - |:IcedTestRedo|

  When tests are failed, vim-iced sets error positions to |quickfix|.
  |:cwindow| command enables you to show this information.

  To show quickfix automatically, following autocmd is useful.
>
  aug VimIcedAutoOpenQuickfix
    au!
    au QuickFixCmdPost vim-iced cwindow
  aug END
<
==============================================================================
Skeleton                                                    *vim-iced-skeleton*

  vim-iced provides code skeleton when you open new clojure files.
  Currently, these extensions are supported.
  - `*.clj`
  - `*.cljs`
  - `*.cljc`

==============================================================================
Tag Jump                                                    *vim-iced-tag-jump*

  |:IcedDefJump| to jump to definition.
  |:IcedDefBack| to jump back.

==============================================================================
Editing S-exp                                          *vim-iced-editing-s-exp*

  Provies slurp and barf function.
  - |IcedSlurp|
  - |IcedBarf|

------------------------------------------------------------------------------
Formatting                                                *vim-iced-formatting*

  vim-sexp also provides formatting codes function.
  If you want to use vim-iced's formatting function,
  you should define {g:sexp_mappings} as follows.
>
  let g:sexp_mappings = {'sexp_indent': '', 'sexp_indent_top': ''}
<
------------------------------------------------------------------------------
Refactoring                                              *vim-iced-refactoring*

  Provides following functions powered by refactor-nrepl.
  - |IcedCleanNs| (|<Plug>(iced_clean_ns)|)

==============================================================================
Interface                                                  *vim-iced-interface*

------------------------------------------------------------------------------
Commands                                                    *vim-iced-commands*

                                                                 *:IcedConnect*
:IcedConnect [{port}]
  Make connection to nREPL.
  If {port} is not passed, {port} is detected by '.nrepl-port' automatically.
  Key is mapped to |<Plug>(iced_connect)|.

                                                              *:IcedDisconnect*
:IcedDisconnect
  Disconnect from nREPL.
  Automatically disconnected at leaving vim.
  Key is mapped to |<Plug>(iced_disconnect)|.

                                                               *:IcedReconnect*
:IcedReconnect
  Disconnect from nREPL, and make connection to nREPL again.
  Previous sessions are closed.
  Key is mapped to |<Plug>(iced_reconnect)|.

                                                               *:IcedInterrupt*
:IcedInterrupt
  Interrupt some code evaluation in current session.
  Key is mapped to |<Plug>(iced_interrupt)|.

                                                           *:IcedStartCljsRepl*
:IcedStartCljsRepl [{env}]
  Start CLJS REPL with specified environment.
  REPL session changes to 'cljs.user' namespace.
  If {env} is not passed, |g:iced#nrepl#cljs#default_env| is used.

  Supports following envionment currently.
  - figwheel
  - nashorn
  - custom
    see |g:iced#nrepl#cljs#custom#start_code|
        |g:iced#nrepl#cljs#custom#stop_code|

  Key is mapped to |<Plug>(iced_start_cljs_repl)|.

                                                            *:IcedQuitCljsRepl*
:IcedQuitCljsRepl
  Quit CLJS REPL.
  REPL session changes to 'user' namespace.
  Key is mapped to |<Plug>(iced_quit_cljs_repl)|.

                                                                    *:IcedEval*
:IcedEval {form}
  Evaluate {form} in current session.

                                                                *:IcedEvalRepl*
:IcedEvalRepl {form}
  Evaluate {form} in REPL session.

                                                                 *:IcedRequire*
:IcedRequire
  Load current file in current session.
  Key is mapped to |<Plug>(iced_require)|.

                                                              *:IcedRequireAll*
:IcedRequireAll
  Require and reload current file in current session.
  Key is mapped to |<Plug>(iced_require_all)|.

                                                                   *:IcedUndef*
:IcedUndef [{symbol}]
  Undefine {symbol} in current namespace.
  If {symbol} is not passed, symbol under cursor is used.
  Key is mapped to |<Plug>(iced_undef)|.

                                                        *:IcedEvalOuterTopList*
:IcedEvalOuterTopList
  Work same as `<Plug>(iced_eval)<Plug>(sexp_outer_top_list)`,
  without scrolling.
  Key is mapped to |<Plug>(iced_eval_outer_top_list)|.

                                                         *:IcedTestUnderCursor*
:IcedTestUnderCursor
  Run test under cursor.
  Key is mapped to |<Plug>(iced_test_under_cursor)|.

                                                                  *:IcedTestNs*
:IcedTestNs
  Run tests in current namespace.
  Key is mapped to |<Plug>(iced_test_ns)|.

                                                                 *:IcedTestAll*
:IcedTestAll
  Run all tests in current project.
  Key is mapped to |<Plug>(iced_test_all)|.

                                                                *:IcedTestRedo*
:IcedTestRedo
  Re run failed tests.
  Key is mapped to |<Plug>(iced_test_redo)|.

                                                        *:IcedStdoutBufferOpen*
:IcedStdoutBufferOpen
  Open stdout buffer.
  Key is mapped to |<Plug>(iced_buffer_open)|.

                                                       *:IcedStdoutBufferClear*
:IcedStdoutBufferClear
  Clear all lines in stdout buffer.
  Key is mapped to |<Plug>(iced_buffer_clear)|.

                                                                 *:IcedDefJump*
:IcedDefJump
  Jump cursor to definition of symbol under cursor.
  Key is mapped to |<Plug>(iced_def_jump)|.

                                                                 *:IcedDefBack*
:IcedDefBack
  Jump back cursor.
  Key is mapped to |<Plug>(iced_def_back)|.

                                                            *:IcedDocumentOpen*
:IcedDocumentOpen [{symbol}]
  Open a window, and show documents for {symbol}.
  If {symbol} is not passed, symbol under cursor is used.
  Key is mapped to |<Plug>(iced_document_open)|.

                                                            *:IcedFormDocument*
:IcedFormDocument
  Echo one-line document for form under cursor.
  This is useful to show document while editing codes.
  See details |<Plug>(iced_form_document)|.

                                                           *:IcedDocumentClose*
:IcedDocumentClose
  Close document window.
  Key is mapped to |<Plug>(iced_document_close)|.

                                                              *:IcedSourceShow*
:IcedSourceShow [{symbol}]
  Open a window, and show source codes for {symbol}
  If {symbol} is not passed, symbol under cursor is used.
  Key is mapped to |<Plug>(iced_source_show)|.

                                                                   *:IcedSlurp*
:IcedSlurp
  Slurp next element.
  If no elements in current form, search next form and slurp.
  For searching next form, |g:iced#paredit#slurp_max_depth| is used.
  Key is mapped to |<Plug>(iced_slurp)|.

                                                                    *:IcedBarf*
:IcedBarf
  Barf last element in current form.
  Key is mapped to |<Plug>(iced_barf)|.

                                                                  *:IcedFormat*
:IcedFormat
  Reformat current form.
  Key is mapped to |<Plug>(iced_format)|.

                                                        *:IcedToggleSrcAndTest*
:IcedToggleSrcAndTest
  Switch between source file and test file.
  Key is mapped to |<Plug>(iced_toggle_src_and_test)|.

                                                                    *:IcedGrep*
:IcedGrep [{keyword}]
  Execute |:grep| command with |g:iced#grep#target|.
  If {keyword} is not passed, keyword under cursor is used.
  Key is mapped to |<Plug>(iced_grep)|.

                                                         *:IcedBrowseNamespace*
:IcedBrowseNamespace
  Browse project namespaces, and open selected namespace.
  `ctrlp.vim` is required to select namespace.
  Key is mapped to |<Plug>(iced_browse_namespace)|.

                                                                 *:IcedCleanNs*
:IcedCleanNs
  Cleanup ns form.
  See https://github.com/clojure-emacs/refactor-nrepl#clean-ns
  Key is mapped to |<Plug>(iced_clean_ns)|.

------------------------------------------------------------------------------
Functions                                                  *vim-iced-functions*

                                                                *iced#status()*
iced#status()
  Return vim-iced's status.
  This is useful to show status in status line.

  Ex. working with https://github.com/itchyny/lightline.vim
>
  let g:lightline = {
      \ 'active': {'right': [['iced']]},
      \ 'component_function': {'iced': 'iced#status'},
      \ }
<

------------------------------------------------------------------------------
Key Mappings                                            *vim-iced-key-mappings*

                                                         *<Plug>(iced_connect)*
<Plug>(iced_connect)
  Same as |:IcedConnect|.

                                                      *<Plug>(iced_disconnect)*
<Plug>(iced_disconnect)
  Same as |:IcedDisconnect|.

                                                       *<Plug>(iced_reconnect)*
<Plug>(iced_reconnect)
  Same as |:IcedReconnect|.

                                                       *<Plug>(iced_interrupt)*
<Plug>(iced_interrupt)
  Same as |:IcedInterrupt|.

                                                 *<Plug>(iced_start_cljs_repl)*
<Plug>(iced_start_cljs_repl)
  Same as |:IcedStartCljsRepl|.

                                                  *<Plug>(iced_quit_cljs_repl)*
<Plug>(iced_quit_cljs_repl)
  Same as |:IcedQuitCljsRepl|.

                                                            *<Plug>(iced_eval)*
<Plug>(iced_eval)
  Evaluate codes.
  Followings are examples for working with {vim-sexp}.
>
  <Plug>(iced_eval)<Plug>(sexp_inner_element)``
  <Plug>(iced_eval)<Plug>(sexp_outer_list)``
  <Plug>(iced_eval)<Plug>(sexp_outer_top_list)``
<

                                                     *<Plug>(iced_macroexpand)*
<Plug>(iced_macroexpand)
  Evaluate {macroexpand}, and show result in a window.
>
  <Plug>(iced_macroexpand)<Plug>(sexp_outer_list)``
<

                                                   *<Plug>(iced_macroexpand_1)*
<Plug>(iced_macroexpand_1)
  Evaluate {macroexpand-1}, and show result in a window.
>
  <Plug>(iced_macroexpand_1)<Plug>(sexp_outer_list)``
<

                                                         *<Plug>(iced_require)*
<Plug>(iced_require)
  Same as |:IcedRequire|.

                                                     *<Plug>(iced_require_all)*
<Plug>(iced_require_all)
  Same as |:IcedRequireAll|.

                                                           *<Plug>(iced_undef)*
<Plug>(iced_undef)
  Same as |:IcedUndef|.

                                             *<Plug>(iced_eval_outer_top_list)*
<Plug>(iced_eval_outer_top_list)
  Same as |:IcedEvalOuterTopList|.

                                                         *<Plug>(iced_test_ns)*
<Plug>(iced_test_ns)
  Same as |:IcedTestNs|.

                                                        *<Plug>(iced_test_all)*
<Plug>(iced_test_all)
  Same as |:IcedTestAll|.

                                                       *<Plug>(iced_test_redo)*
<Plug>(iced_test_redo)
  Same as |:IcedTestRedo|.

                                               *<Plug>(iced_test_under_cursor)*
<Plug>(iced_test_under_cursor)
  Same as |:IcedTestUnderCursor|.

                                              *<Plug>(iced_stdout_buffer_open)*
<Plug>(iced_stdout_buffer_open)
  Same as |:IcedStdoutBufferOpen|.

                                             *<Plug>(iced_stdout_buffer_clear)*
<Plug>(iced_stdout_buffer_clear)
  Same as |:IcedStdoutBufferClear|.

                                                        *<Plug>(iced_def_jump)*
<Plug>(iced_def_jump)
  Same as |:IcedDefJump|.

                                                        *<Plug>(iced_def_back)*
<Plug>(iced_def_back)
  Same as |:IcedDefBack|.

                                                   *<Plug>(iced_document_open)*
<Plug>(iced_document_open)
  Same as |:IcedDocumentOpen|.

                                                   *<Plug>(iced_form_document)*
<Plug>(iced_form_document)
  Same as |:IcedEchoFormDocument|.
  This is convinient to display documents about the form you are editing.
>
  aug vim_iced_echo_document_setting
    au!
    au FileType clojure setl updatetime=1000
    au CursorHoldI *.clj,*.cljs,*.cljc call iced#nrepl#document#current_form()
  aug END
<
                                                  *<Plug>(iced_document_close)*
<Plug>(iced_document_close)
  Same as |:IcedDocumentClose|.

                                                     *<Plug>(iced_source_show)*
<Plug>(iced_source_show)
  Same as |:IcedSourceShow|.

                                                           *<Plug>(iced_slurp)*
<Plug>(iced_slurp)
  Same as |:IcedSlurp|.

                                                            *<Plug>(iced_barf)*
<Plug>(iced_barf)
  Same as |:IcedBarf|.

                                                          *<Plug>(iced_format)*
<Plug>(iced_format)
  Same as |:IcedFormat|.

                                             *<Plug>(iced_toggle_src_and_test)*
<Plug>(iced_toggle_src_and_test)
  Same as |:IcedToggleSrcAndTest|.

                                                           *<Plug>(iced_grep)*
<Plug>(iced_grep)
  Same as |:IcedGrep|.

                                                *<Plug>(iced_browse_namespace)*
<Plug>(iced_browse_namespace)
  Same as |:IcedBrowseNamespace|.

                                                        *<Plug>(iced_clean_ns)*
<Plug>(iced_clean_ns)
  Same as |:IcedCleanNs|.

==============================================================================
Customizing                                              *vim-iced-customizing*

                                                            *g:iced#nrepl#host*
g:iced#nrepl#host
  Connection host name.
  Default value is `'127.0.0.1'`.

                                               *g:iced#paredit#slurp_max_depth*
g:iced#paredit#slurp_max_depth
  Maximum depth for slurping.
  Default value is `5`.

                                                           *g:iced#format#rule*
g:iced#format#rule
  Cljfmt's formatting rule.
  See https://github.com/weavejester/cljfmt#indentation-rules
>
  let g:iced#format#rule = {
        \ 'merr.core/let': '[[:block 2] [:inner 1]]',
        \ }
<

                                                *g:iced#nrepl#cljs#default_env*
g:iced#nrepl#cljs#default_env
  Environment used when |:IcedStartCljsRepl| is called with no argument.
  Default value is `'figwheel'`.

                                                    *g:iced#buffer#stdout#mods*
g:iced#buffer#stdout#mods
  Buffer position definition.
  Following values are supported.
  - {vertical}
  - {leftabove}
  - {aboveleft}
  - {rightbelow}
  - {belowright}
  - {topleft}
  - {botright}

                                                *g:iced#buffer#document#height*
g:iced#buffer#document#height
  Document window height.
  Default value is |'previewheight'|.

                                                   *g:iced#buffer#error#height*
g:iced#buffer#error#height
  Error window height.
  Default value is |'previewheight'|.

                                          *g:iced#nrepl#cljs#custom#start_code*
g:iced#nrepl#cljs#custom#start_code
  Code to start CLJS REPL in {custom} enviroment.

                                           *g:iced#nrepl#cljs#custom#stop_code*
g:iced#nrepl#cljs#custom#stop_code
  Code to stop CLJS REPL in {custom} enviroment.

                                                 *g:iced#nrepl#sync#timeout_ms*
g:iced#nrepl#sync#timeout_ms
  Time to timeout (unit: milli sec).
  Default value is `3000`.

                                                             *g:iced#qf#height*
g:iced#qf#height
  Quickfix window height.
  Default value is `5`.

                                                           *g:iced#grep#target*
g:iced#grep#target
  Grep path target.
  Following keywords are replaced.
  - `{{user.dir}}`
    Project root directory.
  - `{{separator}}`
    File path separator.

  Default value is
    `'{{user.dir}}{{separator}}**{{separator}}*.{clj,cljs,cljc}'`.

                                           *g:iced_enable_default_key_mappings*
g:iced_enable_default_key_mappings
  If {v:true}, apply following mappings.

  {lhs}          {rhs}
  -----------    ---------------------------------------------------
  <Leader>'      <Plug>(iced_connect)
  <Leader>ei     <Plug>(iced_eval)<Plug>(sexp_inner_element)``
  <Leader>ee     <Plug>(iced_eval)<Plug>(sexp_outer_list)``
  <Leader>et     <Plug>(iced_eval_outer_top_list)
  <Leader>eb     <Plug>(iced_require)
  <Leader>eB     <Plug>(iced_require_all)
  <Leader>eu     <Plug>(iced_undef)
  <Leader>eM     <Plug>(iced_macroexpand)<Plug>(sexp_outer_list)``
  <Leader>em     <Plug>(iced_macroexpand_1)<Plug>(sexp_outer_list)``
  <Leader>tt     <Plug>(iced_test_under_cursor)
  <Leader>tn     <Plug>(iced_test_ns)
  <Leader>tp     <Plug>(iced_test_all)
  <Leader>tr     <Plug>(iced_test_redo)
  <Leader>ss     <Plug>(iced_stdout_buffer_open)
  <Leader>rcn    <Plug>(iced_clean_ns)
  <Leader>ram    <Plug>(iced_add_missing)
  <Leader>hs     <Plug>(iced_source_show)
  <Leader>hg     <Plug>(iced_grimoire_open)
  <Leader>gn     <Plug>(iced_browse_namespace)
  <Leader>*      <Plug>(iced_iced)
  <Leader>/      :<C-u>IcedGrep<Space>
  <C-]>          <Plug>(iced_def_jump)
  <C-t>          <Plug>(iced_def_back)
  K              <Plug>(iced_document_open)
  ==             <Plug>(iced_format)

==============================================================================
Changelog                                                  *vim-iced-changelog*

See `git log`.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:
